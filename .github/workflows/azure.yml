
# To configure this workflow:
#
# 1. Set up a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE with the value of your Azure publish profile.
#
# 2. Change the values for the AZURE_WEBAPP_NAME, AZURE_WEBAPP_PACKAGE_PATH and NODE_VERSION environment variables  (below).
#
# For more information on GitHub Actions for Azure, refer to https://github.com/Azure/Actions
# For more samples to get started with GitHub Action workflows to deploy to Azure, refer to https://github.com/Azure/actions-workflow-samples
on:
  pull_request:
    branches:
      - test
      - master

jobs:

# Runs all steps on the VM
# The service containers will use host port binding instead of container networking so you access them via localhost rather than the service name
  vm-job:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:10.8
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
        # will assign a random free host port
        - 5432/tcp
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v1     
    - run: |
        export PGHOST=localhost
        export PGPORT=${{ job.services.postgres.ports[5432] }}
        export PGUSER=postgres
        export PGPASSWORD=postgres
        echo $PGPORT
    - run: |
        echo $PGPORT
        sudo apt-get update
        sudo apt-get install postgresql-client
    - run: |
        sudo -E psql -lqt
        sudo -E psql --no-password -c 'CREATE DATABASE test'
    - run: sudo psql -lqt
      env:
       PGHOST: localhost
       PGPORT: ${{ job.services.postgres.ports[5432] }}
       PGUSER: postgres
       PGPASSWORD: postgres
